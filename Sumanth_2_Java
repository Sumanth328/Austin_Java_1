import java.util.*;

public class Solution {
    public static void main(String[] args) {
        String[] teleporters1 = {"3,1", "4,2", "5,10"};
        String[] teleporters2 = {"5,10", "6,22", "39,40", "40,49", "47,29"};
        String[] teleporters3 = {"6,18", "36,26", "41,21", "49,55", "54,52",
                "71,58", "74,77", "78,76", "80,73", "92,85"};
        String[] teleporters4 = {"97,93", "99,81", "36,33", "92,59", "17,3",
                "82,75", "4,1", "84,79", "54,4", "88,53",
                "91,37", "60,57", "61,7", "62,51", "31,19"};

        List<Integer> result1 = destinations(teleporters1, 6, 0, 20);
        System.out.println(result1);  // [1, 2, 6, 10]

        List<Integer> result2 = destinations(teleporters2, 6, 46, 100);
        System.out.println(result2);  // [48, 49, 50, 51, 52, 29]

        List<Integer> result3 = destinations(teleporters2, 10, 0, 50);
        System.out.println(result3);  // [1, 2, 3, 4, 7, 8, 9, 10, 22]

        List<Integer> result4 = destinations(teleporters3, 10, 95, 100);
        System.out.println(result4);  // [96, 97, 98, 99, 100]

        List<Integer> result5 = destinations(teleporters3, 10, 70, 100);
        System.out.println(result5);  // [72, 73, 75, 76, 77, 79, 58]

        List<Integer> result6 = destinations(teleporters4, 6, 0, 100);
        System.out.println(result6);  // [1, 2, 3, 5, 6]
    }

    public static List<Integer> destinations(String[] teleporters, int die, int start, int end) {
        Set<Integer> uniqueDestinations = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();

        queue.offer(start);
        visited.add(start);

        while (!queue.isEmpty()) {
            int currentSquare = queue.poll();

            // Roll the die and calculate the next square
            for (int roll = 1; roll <= die; roll++) {
                int nextSquare = currentSquare + roll;

                // Check if the player reaches the last square
                if (nextSquare >= end) {
                    uniqueDestinations.add(end);
                    continue;
                }

                // Check if the next square has a teleporter
                boolean isTeleporter = false;
                for (String teleporter : teleporters) {
                    String[] teleporterParts = teleporter.split(",");
                    int fromSquare = Integer.parseInt(teleporterParts[0]);
                    int toSquare = Integer.parseInt(teleporterParts[1]);

                    if (nextSquare == fromSquare) {
                        uniqueDestinations.add(toSquare);
                        isTeleporter = true;
                        break;
                    }
                }

                if (!isTeleporter && !visited.contains(nextSquare)) {
                    queue.offer(nextSquare);
                    visited.add(nextSquare);
                }
            }
        }

        List<Integer> destinations = new ArrayList<>(uniqueDestinations);
        Collections.sort(destinations);
        return destinations;
    }
}
