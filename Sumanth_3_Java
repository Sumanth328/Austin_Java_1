import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@SpringBootApplication
public class LCSApplication {

    public static void main(String[] args) {
        SpringApplication.run(LCSApplication.class, args);
    }

    @RestController
    @RequestMapping("/lcs")
    public static class LCSController {

        @PostMapping
        public ResponseEntity<LCSResponse> findLongestCommonSubstring(@RequestBody LCSRequest request) {
            // Validate the request
            if (request == null || request.getSetOfStrings() == null || request.getSetOfStrings().isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(new LCSResponse("Request body must not be empty."));
            }

            Set<String> uniqueStrings = new HashSet<>();
            List<String> lcsList = new ArrayList<>();

            for (LCSValue value : request.getSetOfStrings()) {
                if (!uniqueStrings.add(value.getValue())) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                            .body(new LCSResponse("Set of strings must contain unique values."));
                }
            }

            // Find the longest common substring
            String firstString = uniqueStrings.iterator().next();
            for (int i = 0; i < firstString.length(); i++) {
                for (int j = i + 1; j <= firstString.length(); j++) {
                    String substring = firstString.substring(i, j);
                    boolean isCommonSubstring = true;

                    for (String string : uniqueStrings) {
                        if (!string.contains(substring)) {
                            isCommonSubstring = false;
                            break;
                        }
                    }

                    if (isCommonSubstring) {
                        lcsList.add(substring);
                    }
                }
            }

            // Sort the LCS list alphabetically
            lcsList.sort(String::compareToIgnoreCase);

            LCSResponse response = new LCSResponse(lcsList);
            return ResponseEntity.ok(response);
        }
    }

    public static class LCSRequest {
        private Set<LCSValue> setOfStrings;

        public Set<LCSValue> getSetOfStrings() {
            return setOfStrings;
        }

        public void setSetOfStrings(Set<LCSValue> setOfStrings) {
            this.setOfStrings = setOfStrings;
        }
    }

    public static class LCSValue {
        private String value;

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }

    public static class LCSResponse {
        private List<String> lcs;

        public LCSResponse() {
        }

        public LCSResponse(List<String> lcs) {
            this.lcs = lcs;
        }

        public LCSResponse(String errorMessage) {
            this.lcs = new ArrayList<>();
            this.lcs.add(errorMessage);
        }

        public List<String> getLcs() {
            return lcs;
        }

        public void setLcs(List<String> lcs) {
            this.lcs = lcs;
        }
    }
}
